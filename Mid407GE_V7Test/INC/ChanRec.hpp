//----------------------------------------------------------------------------------------------------
#ifndef __CHANREC_HPP
    #define __CHANREC_HPP

#include "rtl.h"
//----------------------------------------------------------------------------------------------------
//C++类定义
//-------------------------------------------------------
#ifdef      _IN_CHANREC_CPP
    #define     chanrec_ext
#else
    #define     chanrec_ext extern
#endif
//----------------------------------------------------------------------------------------------------
//  变量记录结构 15-1123 针对V1.1版本读实时明细协议升级，加入长度字段
typedef struct  _strVarRec_
{
    U32     Mark;       // 变量记录标志，常数（0xffffffff）
    U16     Len;        // 长度  15-1123   
    U32     V_Cyc1;     // 循环1
    U32     V_Cyc2;     // 循环2
    U16     V_Day;      // 天数
    U32     V_Ms;       // 毫秒数
    float   V_Cap;      // 容量
    U32     V_Cyc3;     // 循环3
    U32     V_Cyc4;     // 循环4
    U32     V_Cyc5;     // 循环5

} strVarRec;
//----------------------------------------------------------------------------------------------------
//  过程记录结构
typedef struct  _strProcRec_
{
    U32     P_CycNum;   //循环数
    U8      P_Mode;     //工作模式
    U8      P_AbnCode;  //故障暂停代码
    U16     P_Stp;      //工步
    U32     P_TotStp;   //累计工步
    U16     P_StpDay;   //过程时间天数
    U16     P_TotDay;   //总时间天数
    U32     P_StpMs;    //过程时间毫秒
    U32     P_TotMs;    //总时间毫秒

    float   P_Engy;     //能量
    float   P_Cap;      //容量
    float   P_Res;      //动态内阻

//  U32     U32NULL;    //补零

} strProcRec;
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#ifdef      __cplusplus
    extern "C" 
    {
#endif
//--------------------------------------------------
chanrec_ext void    Memset_16b(U16 *dst, U16 val, U32 len);
chanrec_ext void    Memcpy_16b(U16 *dst, U16 *src, U32 len);

//--------------------------------------------------
#ifdef      __cplusplus
    }
#endif
//----------------------------------------------------------------------------------------------------
#endif  //eof
